spring:
  application:
    name: sy-blog-java
  datasource:
    dynamic:
      enabled: true
      primary: typecho
      strict: true
      datasource:
#        wordpress:
#          url: ${SPRING_WORDPRESS_DATASOURCE_URL:jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8&useSSL=false&useTimezone=true&serverTimezone=Asia/Shanghai}
#          username: ${SPRING_WORDPRESS_DATASOURCE_USERNAME:root}
#          password: ${SPRING_WORDPRESS_DATASOURCE_PASSWORD:root}
        typecho:
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: ${SPRING_TYPECHO_DATASOURCE_URL:jdbc:mysql://localhost:3306/typecho?useUnicode=true&characterEncoding=utf-8&useSSL=false&useTimezone=true&serverTimezone=Asia/Shanghai}
          username: ${SPRING_TYPECHO_DATASOURCE_USERNAME:root}
          password: ${SPRING_TYPECHO_DATASOURCE_PASSWORD:root}
      hikari:
        # 连接池最小空闲连接数
        min-idle: ${SPRING_DATASOURCE_MIN_IDLE:20}
        # 连接池允许的最大连接数
        max-pool-size: ${SPRING_DATASOURCE_MAX_POOL_SIZE:200}
        # 等待连接池分配连接的最大时长（毫秒）
        connection-timeout: ${SPRING_DATASOURCE_CONNECTION_TIMEOUT:30000}
        # 空闲连接存活最大时间，默认600000（10分钟）
        idle-timeout: 30000
        # 此属性控制池中连接的最长生命周期，值0表示无限生命周期，默认1800000即30分钟
        max-lifetime: 1800000
        connection-test-query: SELECT 1

  redis:
    host: ${SPRING_REDIS_HOST:localhost}
    port: ${SPRING_REDIS_PORT:6379}
    database: ${SPRING_REDIS_DATABASE:1}
    password: ${SPRING_REDIS_PASSWORD:}
    # Redis连接超时时间
    connect-timeout: ${SPRING_REDIS_CONNECT_TIMEOUT:2000}
    # Redis读取超时时间
    timeout: ${SPRING_REDIS_TIMEOUT:5000}
    lettuce:
      pool:
        # 资源池中最大连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整
        max-active: ${SPRING_REDIS_POOL_MAX_ACTIVE:50}
        # 资源池运行最大空闲的连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整
        # 一般建议和max-active保持一致，避免资源伸缩带来的开销
        max-idle: ${SPRING_REDIS_POOL_MAX_IDLE:50}
        # 当资源池连接用尽后，调用者的最大等待时间(单位为毫秒)
        # 默认 -1 表示永不超时，设置5秒
        max-wait: ${SPRING_REDIS_POOL_MAX_WAIT:5000}
server:
  undertow:
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接
      # 默认值为8，建议设置每个CPU核心一个线程
      io: ${SERVER_UNDERTOW_IO_THREADS:8}
      # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程
      # 默认等于 io-threads*8，它的值设置取决于系统的负载，可适当调大该值
      worker: ${SERVER_UNDERTOW_WORKER_THREADS:128}
    # 每块buffer的空间大小，越小空间被利用越充分
    # 不要设置太大，以免影响其他应用，合适即可
    buffer-size: ${SERVER_UNDERTOW_BUFFER_SIZE:1024}
    # 是否分配的直接内存(NIO直接分配的堆外内存)。默认false
    direct-buffers: true
    # HTTP POST请求最大的大小。默认0，无限制，可设置10M
    max-http-post-size: 0

mybatis:
  mapper-locations:
    - classpath*:/mapper/**/*Mapper.xml
  configuration:
    mapUnderscoreToCamelCase: true
    cache-enabled: false #禁用二级缓存
    local-cache-scope: statement #一级缓存指定为statement级别

springdoc:
  version: '@version@'
  paths-to-match: /**
  swagger-ui:
    display-request-duration: true
    operations-sorter: method
    disable-swagger-default-url: true
    use-root-path: true
sy:
  blog:
    source-type: ${BLOG_SOURCE_TYPE:tp-db}
    rest-api-host: ${WP_REST_API_HOST:https://xn--ghq2ewa7745eca.xn--6qq986b3xl}
    username: ${WP_USERNAME:}
    password: ${WP_PASSWORD:}
    init-cache: ${BLOG_INIT_CACHE:false}

logging:
  level:
    dev.sunriseydy.blog: debug